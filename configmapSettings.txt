 #Kubernetes ConfigMap YAML (clientusermapping-config.yaml)
apiVersion: v1
kind: ConfigMap
metadata:
  name: clientusermapping-config
data:
  application.properties: |
    clientusermapping.user1=client1
    clientusermapping.user2=client2
    # Add more entries as needed

 #Kubernetes Deployment YAML (deployment.yaml) 
  apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-id-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client-id-service
  template:
    metadata:
      labels:
        app: client-id-service
    spec:
      containers:
        - name: client-id-service
          image: your-docker-image
          envFrom:
            - configMapRef:
                name: clientusermapping-config
          env:
            - name: CLIENT_USER_MAPPING_FILE_PATH
              value: "/mnt/azure/clientusermapping.properties"

#######
  Kubernetes ConfigMap:
Defines the properties to be loaded.
Kubernetes Deployment:
Configures the application to load the ConfigMap as environment variables and sets the CLIENT_USER_MAPPING_FILE_PATH environment variable.
###########3
  Bootstrap YAML (bootstrap.yml):
Configures Spring Cloud Kubernetes to reload configuration properties.
##########3

Explanation:
##Gradle Build File (build.gradle):
Configures the Spring Boot project with necessary dependencies.
##Bootstrap YAML (bootstrap.yml):
Configures Spring Cloud Kubernetes to reload configuration properties.
##Application YAML (application.yml):
Defines the clientusermapping.file.path property with a default value that can be overridden by the environment variable CLIENT_USER_MAPPING_FILE_PATH.
##ClientIdService Class:
Reads properties from the ConfigMap and caches them.
The properties file path is injected from the configuration.
##Kubernetes ConfigMap:
Defines the properties to be loaded.
##Kubernetes Deployment:
Configures the application to load the ConfigMap as environment variables and sets the CLIENT_USER_MAPPING_FILE_PATH environment variable.
By following these steps, you can ensure that the properties file path is configurable and can be overridden, providing flexibility and ease of management.




kubectl exec -it <pod-name> -n <namespace> -- /bin/sh -c '
curl -X POST "https://api.tradefeedr.com/demo/v1/fx/algo/parent-orders" \
-H "accept: */*" \
-H "userId: userid1" \
-H "Content-Type: application/json" \
-d @- <<EOF
{
  "options": {
    "select": [
      "Date",
      "ParentOrderID",
      "ArrivalTime",
      "NumChildEvents",
      "NumParentEvents",
      "Side",
      "Symbol",
      "Duration",
      "TradeQuantityUSD",
      "AlgoName",
      "LP",
      "ArrivalPrice",
      "AllInPrice",
      "ArrivalMidPerfBPS",
      "ArrivalMidPerfNetBPS",
      "TWAPMidPerfBPS",
      "TWAPMidPerfNetBPS"
    ],
    "filter": [
      {
        "function": "within",
        "var": "Date",
        "pars": [
          "2014-01-01",
          "2025-12-31"
        ]
      }
    ]
  }
}
EOF
'

  
  
