import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClientManager;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.security.oauth2.core.OAuth2AccessToken;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Base64;
import java.util.Collections;

@Service
public class JWTTokenService {

    private final RestTemplate restTemplate;
    private final OAuth2AuthorizedClientManager authorizedClientManager;
    private final ClientRegistrationRepository clientRegistrationRepository;
    private final String tokenFilePath;

    private volatile String cachedToken;
    private volatile long lastTokenFetchTimeMillis;

    @Autowired
    public JWTTokenService(RestTemplate restTemplate,
                           OAuth2AuthorizedClientManager authorizedClientManager,
                           ClientRegistrationRepository clientRegistrationRepository,
                           @Value("${jwt.token.file.path}") String tokenFilePath) {
        this.restTemplate = restTemplate;
        this.authorizedClientManager = authorizedClientManager;
        this.clientRegistrationRepository = clientRegistrationRepository;
        this.tokenFilePath = tokenFilePath;
    }

    public String getJwtToken() {
        long currentTimeMillis = System.currentTimeMillis();

        if (cachedToken != null && (currentTimeMillis - lastTokenFetchTimeMillis) < getTokenExpirationTimeMillis()) {
            return cachedToken;
        }

        synchronized (this) {
            if (cachedToken == null || (currentTimeMillis - lastTokenFetchTimeMillis) >= getTokenExpirationTimeMillis()) {
                cachedToken = fetchTokenFromOAuth2();
                writeTokenToFile(cachedToken);
                lastTokenFetchTimeMillis = currentTimeMillis;
            }
            return cachedToken;
        }
    }

    private String fetchTokenFromOAuth2() {
        OAuth2AuthorizedClient client = getAuthorizedClient();

        if (client != null && client.getAccessToken() != null) {
            return client.getAccessToken().getTokenValue();
        } else {
            throw new RuntimeException("Failed to fetch JWT token from OAuth2 provider");
        }
    }

    private OAuth2AuthorizedClient getAuthorizedClient() {
        String clientRegistrationId = "your-client-name"; // Replace with your client registration id
        String principalName = SecurityContextHolder.getContext().getAuthentication().getName();
        ClientRegistration clientRegistration = clientRegistrationRepository.findByRegistrationId(clientRegistrationId);
        
        return authorizedClientManager.authorize(
                OAuth2AuthorizeRequest.withClientRegistrationId(clientRegistrationId)
                        .principal(principalName)
                        .build());
    }

    private void writeTokenToFile(String token) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tokenFilePath))) {
            writer.write(token);
        } catch (IOException e) {
            // Handle file write error (e.g., log and throw exception)
        }
    }

    private long getTokenExpirationTimeMillis() {
        // Return your token expiration time in milliseconds
        return 3600 * 1000L; // Example: 1 hour
    }
}
