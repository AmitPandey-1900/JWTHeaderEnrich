package org.example.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.nio.file.*;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@Service
public class JWTTokenService {

    public final RestTemplate restTemplate;
    public ObjectMapper objectMapper;
    public final String tokenFilePath;
    public final String authUrl;
    public final String clientId;
    public final String clientSecret;
    public final String audience;

    private final LockService lockService;

    public String token;
    public Instant expiryTime;

    public JWTTokenService(RestTemplate restTemplate,
                           @Value("${token.file.path}") String tokenFilePath,
                           @Value("${auth0.auth_url}") String authUrl,
                           @Value("${auth0.client_id}") String clientId,
                           @Value("${auth0.client_secret}") String clientSecret,
                           @Value("${auth0.audience}") String audience,
                           LockService lockService) {
        this.restTemplate = restTemplate;
        this.tokenFilePath = tokenFilePath;
        this.authUrl = authUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.audience = audience;
        this.objectMapper = new ObjectMapper();
        this.lockService = lockService;
        loadTokenFromDisk();
    }

    public synchronized void loadTokenFromDisk() {
        try {
            Path path = Paths.get(tokenFilePath);
            if (Files.exists(path)) {
                JsonNode tokenNode = objectMapper.readTree(Files.newBufferedReader(path));
                token = tokenNode.get("access_token").asText();
                expiryTime = Instant.parse(tokenNode.get("expiry_time").asText());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public synchronized void saveTokenToDisk() {
        try {
            Path path = Paths.get(tokenFilePath);
            if (!Files.exists(path.getParent())) {
                Files.createDirectories(path.getParent());
            }
            Map<String, String> tokenData = new HashMap<>();
            tokenData.put("access_token", token);
            tokenData.put("expiry_time", expiryTime.toString());
            Files.write(path, objectMapper.writeValueAsBytes(tokenData),
                    StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void fetchTokenFromAuth0() {
        try {
            if (lockService.createLockFile()) {
                lockService.deleteLockFileOnExit(); // Ensure lock file is deleted on process exit
                if (lockService.validateLockFile()) {
                    HttpHeaders headers = new HttpHeaders();
                    headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);

                    Map<String, String> requestBody = new HashMap<>();
                    requestBody.put("client_id", clientId);
                    requestBody.put("client_secret", clientSecret);
                    requestBody.put("audience", audience);
                    requestBody.put("grant_type", "client_credentials");

                    HttpEntity<Map<String, String>> request = new HttpEntity<>(requestBody, headers);
                    ResponseEntity<String> response = restTemplate.exchange(authUrl, HttpMethod.POST, request, String.class);

                    if (response.getStatusCode().is2xxSuccessful()) {
                        JsonNode responseJson = objectMapper.readTree(response.getBody());
                        token = responseJson.get("access_token").asText();
                        long expiresIn = responseJson.get("expires_in").asLong();
                        expiryTime = Instant.now().plusSeconds(expiresIn - 60); // Subtract 60 seconds to refresh a bit earlier
                        saveTokenToDisk();
                    } else {
                        System.err.println("Failed to fetch token: " + response.getStatusCode());
                    }
                }
                lockService.deleteLockFile();
            } else {
                Thread.sleep(5000);  // Wait for 5 seconds and retry
                fetchTokenFromAuth0();  // Retry token fetch
            }
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            lockService.deleteLockFile();  // Clean up lock file in case of failure
        }
    }

    public synchronized String getToken() {
        if (token == null || Instant.now().isAfter(expiryTime)) {
            fetchTokenFromAuth0();
            saveTokenToDisk(); // Save token to disk after fetching new token
        }
        return token;
    }

    // Scheduled task to refresh token before expiry
    @Scheduled(fixedDelayString = "${token.refresh.delay:300000}")
    public synchronized void refreshToken() {
        if (token == null || Instant.now().isAfter(expiryTime.minusSeconds(300))) {
            fetchTokenFromAuth0();
            saveTokenToDisk(); // Save token to disk after fetching new token
        }
    }
}
