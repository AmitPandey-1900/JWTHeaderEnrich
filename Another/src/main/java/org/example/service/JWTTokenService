@Service
@PropertySource("classpath:auth0-client.properties") // Replace with your property source name
public class JWTTokenService {

    @Autowired
    private OAuth2ClientContext oauth2ClientContext;

    @Value("${spring.security.oauth2.client.registration.auth0.client-id}")
    private String clientId;

    @Value("${spring.security.oauth2.client.registration.auth0.client-secret}")
    private String clientSecret;

    @Value("${data.file.path}") // Path to write token to disk
    private String tokenFilePath;

    private volatile String cachedToken;
    private volatile long lastTokenFetchTimeMillis;
    private final long tokenExpirationMillis;

    public JWTTokenService(@Value("${jwt.token.expiration.buffer}") Long expirationBufferSeconds) {
        this.tokenExpirationMillis = expirationBufferSeconds * 1000L; // Convert seconds to milliseconds
    }

    public synchronized String getUnexpiredToken() throws IOException {
        long currentTimeMillis = System.currentTimeMillis();

        if (cachedToken != null && (currentTimeMillis - lastTokenFetchTimeMillis) < tokenExpirationMillis) {
            return cachedToken;
        }

        fetchAndStoreToken();
        return cachedToken;
    }

    private void fetchAndStoreToken() throws IOException {
        ClientCredentialsResourceDetails resourceDetails = new ClientCredentialsResourceDetails();
        resourceDetails.setId("auth0"); // Adjust if your client registration ID is different
        resourceDetails.setClientId(clientId);
        resourceDetails.setClientSecret(clientSecret);
        resourceDetails.setGrantType("client_credentials");
        resourceDetails.setAccessTokenUri("https://auth0.com/docs/get-started/tenant-settings"); // Replace with your Auth0 tenant URL

        TokenProvider<DefaultOAuth2AccessToken> tokenProvider = new DefaultTokenProvider<DefaultOAuth2AccessToken>();
        DefaultOAuth2AccessToken token = tokenProvider.obtainAccessToken(resourceDetails, new DefaultRequestFactory());

        // Extract expiration from token (assuming presence of 'exp' claim)
        long tokenExpiration = token.getExpires().getTime();
        long actualExpirationMillis = tokenExpiration - tokenExpirationMillis; // Apply buffer

        cachedToken = token.getValue();
        lastTokenFetchTimeMillis = currentTimeMillis;

        // Write token to disk (implementation specific)
        try (Writer writer = new FileWriter(tokenFilePath)) {
            writer.write(cachedToken);
        }
    }
}
