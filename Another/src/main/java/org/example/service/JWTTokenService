package org.example.service;

import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientBuilder;
import io.fabric8.kubernetes.client.dsl.base.LeaderElector;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@Service
public class JWTTokenService {

    private final RestTemplate restTemplate;
    private ObjectMapper objectMapper;
    private final String tokenFilePath;
    private final String authUrl;
    private final String clientId;
    private final String clientSecret;
    private final String audience;

    private String token;
    private Instant expiryTime;

    private final LeaderElector leaderElector;

    public JWTTokenService(RestTemplate restTemplate,
                           @Value("${token.file.path}") String tokenFilePath,
                           @Value("${auth0.auth_url}") String authUrl,
                           @Value("${auth0.client_id}") String clientId,
                           @Value("${auth0.client_secret}") String clientSecret,
                           @Value("${auth0.audience}") String audience) {
        this.restTemplate = restTemplate;
        this.tokenFilePath = tokenFilePath;
        this.authUrl = authUrl;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.audience = audience;
        objectMapper = new ObjectMapper();
        loadTokenFromDisk();

        // Initialize Kubernetes Client and LeaderElector
        KubernetesClient kubernetesClient = new KubernetesClientBuilder().build();
        leaderElector = new LeaderElector(kubernetesClient, "leader-election-config", "jwt-token-service-leader");
    }

    public synchronized void loadTokenFromDisk() {
        try {
            Path path = Paths.get(tokenFilePath);
            if (Files.exists(path)) {
                JsonNode tokenNode = objectMapper.readTree(Files.newBufferedReader(path));
                token = tokenNode.get("access_token").asText();
                expiryTime = Instant.parse(tokenNode.get("expiry_time").asText());
            }
        } catch (IOException e) {
            // Handle exception
            e.printStackTrace();
        }
    }

    public synchronized void saveTokenToDisk() {
        try {
            Path path = Paths.get(tokenFilePath);
            if (!Files.exists(path.getParent())) {
                Files.createDirectories(path.getParent());
            }
            Map<String, String> tokenData = new HashMap<>();
            tokenData.put("access_token", token);
            tokenData.put("expiry_time", expiryTime.toString());
            Files.write(path, objectMapper.writeValueAsBytes(tokenData),
                    StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (IOException e) {
            // Handle exception
            e.printStackTrace();
        }
    }

    public void fetchTokenFromAuth0() {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);

        Map<String, String> requestBody = new HashMap<>();
        requestBody.put("client_id", clientId);
        requestBody.put("client_secret", clientSecret);

        HttpEntity<Map<String, String>> request = new HttpEntity<>(requestBody, headers);
        ResponseEntity<String> response = restTemplate.exchange(authUrl, HttpMethod.POST, request, String.class);

        if (response.getStatusCode().is2xxSuccessful()) {
            try {
                JsonNode responseJson = objectMapper.readTree(response.getBody());
                token = responseJson.get("access_token").asText();
                long expiresIn = responseJson.get("expires_in").asLong();
                expiryTime = Instant.now().plusSeconds(expiresIn - 60); // Subtract 60 seconds to refresh a bit earlier
                saveTokenToDisk();
            } catch (IOException e) {
                // Handle exception
                e.printStackTrace();
            }
        } else {
            // Handle unsuccessful response
            System.err.println("Failed to fetch token: " + response.getStatusCode());
        }
    }

    public synchronized String getToken() {
        if (leaderElector.isLeader()) {
            if (token == null || Instant.now().isAfter(expiryTime)) {
                fetchTokenFromAuth0();
                saveTokenToDisk(); // Save token to disk after fetching new token
            }
        } else {
            System.out.println("Not the leader, returning cached token.");
        }
        return token;
    }

    // Scheduled task to refresh token before expiry
    @Scheduled(fixedDelayString = "${token.refresh.delay:300000}")
    public synchronized void refreshToken() {
        if (leaderElector.isLeader()) {
            if (token == null || Instant.now().isAfter(expiryTime.minusSeconds(300))) {
                fetchTokenFromAuth0();
                saveTokenToDisk(); // Save token to disk after fetching new token
            }
        } else {
            System.out.println("Not the leader, skipping token refresh.");
        }
    }
}
