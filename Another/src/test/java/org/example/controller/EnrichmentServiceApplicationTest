package org.example.controller;

import org.example.service.ClientIdService;
import org.example.service.JWTTokenService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.web.client.RestTemplate;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(value = EnrichmentServiceApplication.class, excludeAutoConfiguration = SecurityAutoConfiguration.class)
public class EnrichmentServiceApplicationTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private JWTTokenService jwtTokenService;

    @MockBean
    private ClientIdService clientIdService;

    @MockBean
    private RestTemplate restTemplate; // Mock external dependency
    @Value("${jwt.token.url}")
    private String jwtTokenUrl;
    @Test
    public void testWildcardMapping() throws Exception {
        // Mock service responses
        when(jwtTokenService.getToken()).thenReturn(jwtTokenUrl);
        when(clientIdService.getClientId(anyString())).thenReturn("mockClientId");
        when(restTemplate.exchange(anyString(), any(), any(), any(Class.class)))
                .thenReturn(ResponseEntity.ok("Mock TradeFeeder response"));

        // Perform the request with a sample path
        mockMvc.perform(post("/tradefeedr/orders/create") // Example path
                        .header("userId", "testUser")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"order\": \"data\"}"))
                .andExpect(status().isOk());
    }

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import javax.servlet.http.HttpServletRequest;

public class TradefeederURLTest {

    @Test
    public void testConstructTradefeederURL() {
        // Create a mock HttpServletRequest
        MockHttpServletRequest request = new MockHttpServletRequest();

        // Set up the headers
        String xForwardedPrefix = "/prefix";
        String xForwardedPath = "/prefix/path/to/resource";
        request.addHeader("x-forwarded-prefix", xForwardedPrefix);
        request.addHeader("x-forwarded-path", xForwardedPath);

        // Create an instance of the class containing the method (assume it's named TradefeederService)
        TradefeederService tradefeederService = new TradefeederService();

        // Call the method with the original URI and the mock request
        String originalUri = "https://example.com/api/resource";
        String expectedModifiedPath = "https://trade.com/path/to/resource";  // Expected output
        String result = tradefeederService.constructTradefeederURL(originalUri, request);

        // Assert that the result matches the expected output
        assertEquals(expectedModifiedPath, result);
    }
}

}
