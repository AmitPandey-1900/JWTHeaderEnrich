package org.example.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.util.ReflectionTestUtils;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ClientIdServiceTest {

    @InjectMocks
    private ClientIdService clientIdService;

    @Mock
    private Path mockPath;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        ReflectionTestUtils.setField(clientIdService, "configFilePath", "src/test/resources/client-user-mapping.properties");
    }

    @Test
    void testInit() throws IOException {
        clientIdService.init();

        Map<String, String> clientIdMap = (Map<String, String>) ReflectionTestUtils.getField(clientIdService, "clientIdMap");

        assertNotNull(clientIdMap);
        assertEquals(3, clientIdMap.size());
        assertEquals("clientId1", clientIdMap.get("userId1"));
        assertEquals("clientId2", clientIdMap.get("userId2"));
        assertEquals("clientId3", clientIdMap.get("userId3"));
    }

    @Test
    void testGetClientId() throws IOException {
        clientIdService.init();
        String clientId = clientIdService.getClientId("userId1");

        assertEquals("clientId1", clientId);
    }

    @Test
    void testGetClientIdNotFound() throws IOException {
        clientIdService.init();
        
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            clientIdService.getClientId("nonexistentUser");
        });

        assertEquals("Client ID not found for user: nonexistentUser", exception.getMessage());
    }
}
